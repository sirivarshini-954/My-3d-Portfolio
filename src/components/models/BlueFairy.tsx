/* Auto-generated by: https://github.com/pmndrs/gltfjsx */
"use client";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import * as THREE from "three";

export default function WizardModel(props: any) {
  const { nodes, materials } = useGLTF("/models/bluefairy.glb");
  console.log("Available nodes:", nodes); // Debug log to check loaded nodes
  const modelRef = useRef<THREE.Group>();

  useFrame((state, delta, xrFrame) => {
    if (modelRef.current) {
      modelRef.current.position.y = 0.3 + Math.sin(state.clock.elapsedTime) * 0.15; // Centered with bobbing
    }
  });

  // Fallback if nodes are undefined
  if (!nodes || Object.keys(nodes).length === 0) {
    console.warn("No valid nodes found in bluefairy.glb");
    return <group ref={modelRef} {...props} dispose={null} />;
  }

  // Dynamically render all meshes from nodes
  const meshes = Object.entries(nodes)
    .filter(([name, node]) => node.type === "Mesh")
    .map(([name, node]) => (
      <mesh
        key={name}
        castShadow
        receiveShadow
        geometry={(node as THREE.Mesh).geometry}
        material={materials[Object.keys(materials)[0]] || new THREE.MeshBasicMaterial({ color: 0x00ff00 })} // Fallback material
        position={[0, 0, 0]} // Centered within group
        rotation={[0, 0, 0]} // Reset rotation
        scale={1} // Default scale
      />
    ));

  return (
    <group
      {...props}
      ref={modelRef}
      dispose={null}
      position={[0, 0.19, 0]} // Centered and slightly upward
      scale={[1.2, 1.2, 1.2]} // Size confirmed sufficient
      rotation={[0, 0, 0]} // Reset rotation
    >
      {meshes}
    </group>
  );
}

useGLTF.preload("/models/bluefairy.glb");