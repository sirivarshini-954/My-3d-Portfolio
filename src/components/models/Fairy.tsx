/* Auto-generated by: https://github.com/pmndrs/gltfjsx */
"use client";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import * as THREE from "three";

const FairyModel = React.memo(function FairyModel(props) {
  const { nodes, materials } = useGLTF("/models/forest-fairy.glb");

  const modelRef = useRef<THREE.Group | null>(null);

  useFrame(() => {
    if (modelRef.current) {
      modelRef.current.rotation.y += 0.007;
      modelRef.current.position.y = 0.3 + Math.sin(Date.now() * 0.001) * 0.15; // Gentle bobbing
    }
  });

  if (!nodes || Object.keys(nodes).length === 0) {
    console.warn("No valid nodes found in forest-fairy.glb"); // Fixed warning to match file
    return <group ref={modelRef} {...props} dispose={null} />;
  }

  const meshNode = nodes.mesh_0 as THREE.Mesh;

  return (
    <group
      {...props}
      dispose={null}
      ref={modelRef}
      scale={[1.5, 1.5, 1.5]} // Fixed scale
      rotation={[0.25, 0, 0]} // Slight tilt
      position={[0, 0.3, 0]} // Centered
    >
      <mesh
        castShadow
        receiveShadow
        geometry={meshNode.geometry}
        material={materials[Object.keys(materials)[0]] || new THREE.MeshBasicMaterial({ color: 0x00ff00 })}
        position={[0, 0, 0]}
        rotation={[0, 0, 0]}
        scale={1}
      />
    </group>
  );
});

export default FairyModel;
useGLTF.preload("/models/forest-fairy.glb");